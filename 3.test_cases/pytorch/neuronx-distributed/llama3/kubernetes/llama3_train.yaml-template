apiVersion: v1
kind: Service
metadata:
  name: etcd
  namespace: kubeflow
spec:
  ports:
    - name: etcd-client-port
      port: 2379
      protocol: TCP
      targetPort: 2379
  selector:
    app: etcd

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: etcd
  name: etcd
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: etcd
  template:
    metadata:
      labels:
        app: etcd
    spec:
      containers:
        - name: etcd
          command: ["/usr/local/bin/etcd"]
          args:
            - "--data-dir"
            - "/var/lib/etcd"
            - "--enable-v2"
            - "--listen-client-urls"
            - "http://0.0.0.0:2379"
            - "--advertise-client-urls"
            - "http://0.0.0.0:2379"
            - "--initial-cluster-state"
            - "new"
          image: quay.io/coreos/etcd:v3.5.19
          ports:
            - containerPort: 2379
              name: client
              protocol: TCP
            - containerPort: 2380
              name: server
              protocol: TCP
      restartPolicy: Always
---
apiVersion: "kubeflow.org/v1"
kind: PyTorchJob
metadata:
  name: trn1-llama3
  namespace: kubeflow
spec:
  elasticPolicy:
    rdzvBackend: etcd
    rdzvHost: etcd
    rdzvPort: 2379
    minReplicas: 1
    maxReplicas: 64
    maxRestarts: 100
    metrics:
      - type: Resource
        resource:
          name: cpuyeah
          target:
            type: Utilization
            averageUtilization: 90
  pytorchReplicaSpecs:
    Worker:
      replicas: 1
      restartPolicy: OnFailure
      template:
        metadata:
          labels:
            app: trn1-llama3
        spec:
          volumes:
            - name: shmem
              hostPath: 
                path: /dev/shm
            - name: persistent-storage
              persistentVolumeClaim:
                claimName: ${FSX_CLAIM}
            - name: local
              hostPath:
                path: /dev
            - name: hyperpod
              hostPath:
                path: /var/log/aws/clusters
          nodeSelector:
           node.kubernetes.io/instance-type: ${INSTANCE_TYPE}
          containers:
            - name: pytorch
              image: ${IMAGE_URI}
              imagePullPolicy: Always
              resources:
                requests:
                  aws.amazon.com/neuron: ${NEURON_PER_NODE}
                  vpc.amazonaws.com/efa: ${EFA_PER_NODE}
                limits:
                  aws.amazon.com/neuron: ${NEURON_PER_NODE}
                  vpc.amazonaws.com/efa: ${EFA_PER_NODE}
              env:
              - name: LOGLEVEL
                value: "DEBUG"
              - name: FI_PROVIDER
                value: efa
              - name: FI_EFA_USE_DEVICE_RDMA
                value: "1"
              - name: FI_EFA_FORK_SAFE
                value: "1"
              - name: FI_LOG_LEVEL
                value: "1"
              - name: FI_EFA_ENABLE_SHM_TRANSFER
                value: "1"
              - name: NEURON_RT_NUM_CORES
                value: "32"
              - name: NUM_NEURONCORES
                value: "32"
              - name: TPU_NUM_DEVICES
                value: "32"
              - name: TPU_CHIPS_PER_HOST_BOUNDS
                value: "32"
              - name: TORCH_NCCL_DEBUG_INFO_TEMP_FILE
                value: "/local/nccl_trace_rank_"
              - name: PYTORCH_CUDA_ALLOC_CONF
                value: "expandable_segments:True"
              - name: MALLOC_ARENA_MAX
                value: "64"
              - name: NCCL_SOCKET_IFNAME
                value: "^lo"
              - name: NEURON_RT_ASYNC_EXEC_MAX_INFLIGHT_REQUESTS
                value: "3"
              - name: NEURON_FUSE_SOFTMAX
                value: "1"
              - name: NEURON_CC_FLAGS
                value: "--model-type transformer --distribution-strategy=llm-training --cache_dir=${NEURON_CACHE_DIR}"
              command: 
                - torchrun
                - --nproc_per_node=32
                - --nnodes=$NUM_NODES
                - train.py
                - --model_path=${MODEL_PATH}
                - --data_dir=${TOKENIZED_DATA_PATH}/${DATASET_NAME}_llama3_tokenized_8k
                - --tensor_parallel_size=32
                - --batch_size=${BATCH_SIZE}
                - --steps_this_run=${STEPS_THIS_RUN}
                - --max_steps=${MAX_STEPS}
                - --warmup_steps=100
                - --lr=1.5e-4
                - --grad_accum_usteps=16
                - --seq_len=8192
                - --sequence_parallel_enabled
                - --selective_checkpoint_enabled
                - --logging_interval=10
                - --qkv_linear
                - --kv_replicator=4
                - --use_flash_attention=1
                - --use_zero_1
                - --use_mix_precision
                - --checkpoint_freq=${CHECKPOINT_FREQ}
                - --num_kept_checkpoint=${NUM_KEPT_CHECKPOINTS}
                - --checkpoint_dir=${CHECKPOINT_DIR}
              volumeMounts:
                - name: shmem
                  mountPath: /dev/shm
                - name: persistent-storage
                  mountPath: /fsx
                - name: hyperpod
                  mountPath: /var/log/aws/clusters
