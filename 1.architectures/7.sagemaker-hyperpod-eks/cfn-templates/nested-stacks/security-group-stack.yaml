AWSTemplateFormatVersion: '2010-09-09'
Description: Security Group Stack

Parameters: 
  ResourceNamePrefix:
    Description: Prefix to be used for all resources created by this template.
    Type: String
    Default: sagemaker-hyperpod-eks

  VpcId: 
    Description: The ID of the VPC you wish to use if you do not want to create a new VPC. 
    Type: String
    Default: vpc-1234567890abcdef0

  CreateNewSG:
    Description: Whether to create a new security group
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']

  SecurityGroupId: 
    Description: The ID of the security group associated with an existing EKS cluster. 
    Type: String
    Default: sg-1234567890abcdef0

Conditions: 
  CreateNewSG: !Equals 
    - !Ref CreateNewSG
    - 'true'

Resources: 
  NoIngressSecurityGroup:
    Condition: CreateNewSG
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ResourceNamePrefix}-no-ingress-sg'
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VpcId

  IntraSGCommunicationRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allow traffic within the security group"
      GroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId
      IpProtocol: -1
      SourceSecurityGroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId

  IntraSGCommunicationRuleEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Allow traffic within the security group"
      GroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId
      IpProtocol: -1
      DestinationSecurityGroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId

  InternetCommunicationRuleEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: "Allow traffic to internet"
      GroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: -1

  FSxForLustreRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allows Lustre traffic between FSx for Lustre file servers and Lustre clients"
      GroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId
      IpProtocol: tcp
      FromPort: 988
      ToPort: 988
      SourceSecurityGroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId

  FSxForLustreRule2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Allows Lustre traffic between FSx for Lustre file servers and Lustre clients"
      GroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId
      IpProtocol: tcp
      FromPort: 1018
      ToPort: 1023
      SourceSecurityGroupId: !If 
        - CreateNewSG
        - !Ref NoIngressSecurityGroup
        - !Ref SecurityGroupId

Outputs:
  SecurityGroupId:
    Description: Security Group Id
    # Conditionally return the new security group Id
    # Or the existing security group Id
    Value: !If
      - CreateNewSG
      - !Ref NoIngressSecurityGroup
      - !Ref SecurityGroupId